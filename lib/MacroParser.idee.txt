  
  
  + block einlesen: 
    potentiale grenze gefunden -> schreibe in den output.
    parseCommand:
    analysiere den block
    ist-command?
    ja:
    		finde die grenzen für den block-scope
    		lese den scope ein
    		falls beim lesen ein command gefunden wurde
    		   aktuelles command auf den stack legen
    		   call parseCommand:

            scope ende gefunden
            command auf dem scope ausführen
            result in den buffer legen.
            ... hier mit verschachtelung noch genau planen!!!
            
            replace until x
              replace until y
                txtY -> txtYT 
              y
              
              d.h. replace until x wird auf dem BUFFER ausgeführt.
            x

buffer wird weggeshrieben, wenn alle
kinder des macros abgearbeitet wurden            
       --> schreibe den block in die datei

remove command-blocks!
--> optimierung! (spätere phase)     
    		command auf dem scope ausführen.
    		scope in den buffer schreiben.    		   
    		
    
    lese weiter und fü
  
  